## 策略模式

#### 结构：
   - 环境(context)角色： 持有一个Strategty的引用
   - 抽象策略（strategy）角色：一个抽象角色，通常一个接口或者抽象类实现。
   - 具体策略（ConcreteStrategy）对象：包装了相应的算法或者行为
#### 认识：
  1. 重心 
   - 策略模式的重心不是如何实现算法，而是如何组织、调用这些算法，从而让程序结构更灵活，具有更好的维护性和扩展性。 
  2. 算法平等性
  -  策略模式一个很大的特点就是各个策略算法的平等性。
  - 所有的策略算法在实现上也是相互独立的，相互之间是没有依赖的。
  3. 运行时策略的唯一性
  - 　运行期间，策略模式在每一个时刻只能使用一个具体的策略实现对象，虽然可以动态地在不同的策略实现中切换，但是同时只能使用一个。
##### 优点
   - 策略模式提供了管理相关的算法族的办法。策略类的等级结构定义了一个算法或行为族。恰当使用继承可以把公共的代码移到父类里面，从而避免代码重复。
   - 使用策略模式可以避免使用多重条件(if-else)语句。
##### 缺点
   - 客户端必须知道所有的策略类，并自行决定使用哪一个策略类。
   - 由于策略模式把每个具体的策略实现都单独封装成为类，如果备选的策略很多的话，那么对象的数目就会很可观。