## 适配器模式
适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。
### 类适配器
#### 原理：
通过继承来实现适配。
#### 优点：
- 由于适配器类是适配者类的子类，因此可以再适配器类中置换一些适配者的方法，使得适配器的灵活性
#### 缺点：
- 对于Java、C#等不支持多重继承的语言，一次最多只能适配一个适配者类，而且目标抽象类只能为接口，不能为类，其使用有一定的局限性，不能将一个适配者类和他的子类同时适配到目标接口。

### 对象适配器
#### 原理：
通过组合来实现适配器功能。
#### 优点：
- 把多个不同的适配者适配到同一个目标，也就是说，同一个适配器可以把适配者类和他的子类都适配到目标接口。
#### 缺点：
- 与类适配器模式相比，要想置换适配者类的方法就不容易。
### 应用场景：
- 想要使用一个已经存在的类，但是它却不符合现有的接口规范，导致无法直接去访问，这时创建一个适配器就能间接去访问这个类中的方法。
- 我们有一个类，想将其设计为可重用的类（可被多处访问），我们可以创建适配器来将这个类来适配其他没有提供合适接口的类。

#### 总结：
由于类适配器和对象适配器使用都有一定的局限性，所以两者可以配合着使用是最好的。